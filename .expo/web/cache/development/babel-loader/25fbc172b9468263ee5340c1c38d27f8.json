{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { call, put } from 'redux-saga/effects';\nexport var reducerUtils = {\n  initial: function initial(initialData) {\n    return {\n      loading: true,\n      data: initialData || null,\n      error: null\n    };\n  },\n  loading: function loading(prevState) {\n    return {\n      loading: true,\n      data: prevState || null,\n      error: null\n    };\n  },\n  success: function success(payload) {\n    return {\n      loading: false,\n      data: payload,\n      error: null\n    };\n  },\n  error: function error(_error) {\n    return {\n      loading: false,\n      data: null,\n      error: _error\n    };\n  }\n};\nexport function createPromiseSaga(type, promiseCreator) {\n  var SUCCESS = type + \"_SUCCESS\",\n      ERROR = type + \"_ERROR\";\n  return _regeneratorRuntime.mark(function saga(action) {\n    var _payload;\n\n    return _regeneratorRuntime.wrap(function saga$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            console.log('action: ', action);\n            _context.next = 4;\n            return call(promiseCreator, action.payload);\n\n          case 4:\n            _payload = _context.sent;\n            _context.next = 7;\n            return put({\n              type: SUCCESS,\n              payload: _payload\n            });\n\n          case 7:\n            _context.next = 13;\n            break;\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](0);\n            _context.next = 13;\n            return put({\n              type: ERROR,\n              error: true,\n              payload: _context.t0\n            });\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, saga, null, [[0, 9]]);\n  });\n}\nexport function createPromiseSagaById(type, promiseCreator) {\n  var SUCCESS = type + \"_SUCCESS\",\n      ERROR = type + \"_ERROR\";\n  return _regeneratorRuntime.mark(function saga(action) {\n    var id, _payload2;\n\n    return _regeneratorRuntime.wrap(function saga$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            id = action.meta;\n            _context2.prev = 1;\n            _context2.next = 4;\n            return call(promiseCreator, action.payload);\n\n          case 4:\n            _payload2 = _context2.sent;\n            _context2.next = 7;\n            return put({\n              type: SUCCESS,\n              payload: _payload2,\n              meta: id\n            });\n\n          case 7:\n            _context2.next = 13;\n            break;\n\n          case 9:\n            _context2.prev = 9;\n            _context2.t0 = _context2[\"catch\"](1);\n            _context2.next = 13;\n            return put({\n              type: ERROR,\n              error: _context2.t0,\n              meta: id\n            });\n\n          case 13:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, saga, null, [[1, 9]]);\n  });\n}\nexport function handleAsyncActions(type, key, initialData) {\n  var keepData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var SUCCESS = type + \"_SUCCESS\",\n      ERROR = type + \"_ERROR\";\n  return function (state, action) {\n    switch (action.type) {\n      case type:\n        return _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, key, {\n          loading: true,\n          error: null,\n          data: keepData ? state[key].data : initialData\n        }));\n\n      case SUCCESS:\n        return _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, key, {\n          loading: false,\n          error: null,\n          data: action.payload\n        }));\n\n      case ERROR:\n        return _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, key, {\n          loading: false,\n          error: action.payload,\n          data: null\n        }));\n\n      default:\n        return state;\n    }\n  };\n}\nexport function handleAsyncActionsById(type, key) {\n  var keepData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var SUCCESS = type + \"_SUCCESS\",\n      ERROR = type + \"_ERROR\";\n  return function (state, action) {\n    var id = action.meta;\n\n    switch (action.type) {\n      case type:\n        return _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, key, _objectSpread(_objectSpread({}, state[key]), {}, {\n          loading: true,\n          error: null,\n          data: _objectSpread(_objectSpread({}, state[key].data), {}, _defineProperty({}, id, keepData ? state[key][id] && state[key][id].data : null))\n        })));\n\n      case SUCCESS:\n        return _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, key, _objectSpread(_objectSpread({}, state[key]), {}, {\n          loading: false,\n          error: null,\n          data: _objectSpread(_objectSpread({}, state[key].data), {}, _defineProperty({}, id, action.payload))\n        })));\n\n      case ERROR:\n        return _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, key, _objectSpread(_objectSpread({}, state[key]), {}, {\n          loading: false,\n          error: action.payload\n        })));\n\n      default:\n        return state;\n    }\n  };\n}","map":{"version":3,"sources":["/home/limwondong/codestates/nyamnyam/nyamnyam-client/src/lib/asyncUtils.ts"],"names":["call","put","reducerUtils","initial","initialData","loading","data","error","prevState","success","payload","createPromiseSaga","type","promiseCreator","SUCCESS","ERROR","saga","action","console","log","createPromiseSagaById","id","meta","handleAsyncActions","key","keepData","state","handleAsyncActionsById"],"mappings":"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","sourcesContent":["import { call, put } from 'redux-saga/effects';\nimport { AsyncState } from '@base/types/utils';\nimport { AnyAction } from 'redux';\nimport { AxiosError } from 'axios';\n\ntype AnyState = { [key: string]: any };\n\nexport const reducerUtils = {\n  initial: <T, E = AxiosError<any> | null>(\n    initialData?: T\n  ): AsyncState<T, E> => ({\n    loading: true,\n    data: initialData || null,\n    error: null,\n  }),\n  // 로딩중 상태. prevState의 경우엔 기본값은 null 이지만\n  // 따로 값을 지정하면 null 로 바꾸지 않고 다른 값을 유지시킬 수 있습니다.\n  loading: <T, E = AxiosError<any> | null>(\n    prevState?: T\n  ): AsyncState<T, E> => ({\n    loading: true,\n    data: prevState || null,\n    error: null,\n  }),\n  // 성공 상태\n  success: <T, E = AxiosError<any> | null>(payload: T): AsyncState<T, E> => ({\n    loading: false,\n    data: payload,\n    error: null,\n  }),\n  // 실패 상태\n  error: <T, E = AxiosError<any> | null>(error: E): AsyncState<T, E> => ({\n    loading: false,\n    data: null,\n    error: error,\n  }),\n};\n\ntype PromiseCreatorFunction<P, T> =\n  | ((payload: P) => Promise<T>)\n  | (() => Promise<T>);\n\n// 프로미스를 기다렸다가 결과를 디스패치하는 사가\nexport function createPromiseSaga<P1, P2>(\n  type: string,\n  promiseCreator: PromiseCreatorFunction<P1, P2>\n) {\n  const [SUCCESS, ERROR] = [`${type}_SUCCESS`, `${type}_ERROR`];\n  return function* saga(action: AnyAction) {\n    try {\n      console.log('action: ', action);\n      // 재사용성을 위하여 promiseCreator 의 파라미터엔 action.payload 값을 넣도록 설정합니다.\n      const payload = yield call(promiseCreator, action.payload);\n      yield put({ type: SUCCESS, payload });\n    } catch (e) {\n      yield put({ type: ERROR, error: true, payload: e });\n    }\n  };\n}\n\n// 특정 id의 데이터를 조회하는 용도로 사용하는 사가\n// API를 호출 할 때 파라미터는 action.payload를 넣고,\n// id 값을 action.meta로 설정합니다.\nexport function createPromiseSagaById<P1, P2>(\n  type: string,\n  promiseCreator: PromiseCreatorFunction<P1, P2>\n) {\n  const [SUCCESS, ERROR] = [`${type}_SUCCESS`, `${type}_ERROR`];\n  return function* saga(action: AnyAction) {\n    const id = action.meta;\n    try {\n      const payload = yield call(promiseCreator, action.payload);\n      yield put({ type: SUCCESS, payload, meta: id });\n    } catch (e) {\n      yield put({ type: ERROR, error: e, meta: id });\n    }\n  };\n}\n\nexport function handleAsyncActions<P extends AnyState>(\n  type: string,\n  key: string,\n  initialData: any,\n  keepData = false\n) {\n  const [SUCCESS, ERROR] = [`${type}_SUCCESS`, `${type}_ERROR`];\n  return (state: P, action: AnyAction): P => {\n    switch (action.type) {\n      case type:\n        return {\n          ...state,\n          [key]: {\n            loading: true,\n            error: null,\n            data: keepData ? state[key].data : initialData,\n          },\n        };\n      case SUCCESS:\n        return {\n          ...state,\n          [key]: {\n            loading: false,\n            error: null,\n            data: action.payload,\n          },\n        };\n      case ERROR:\n        return {\n          ...state,\n          [key]: {\n            loading: false,\n            error: action.payload,\n            data: null,\n          },\n        };\n      default:\n        return state;\n    }\n  };\n}\n\nexport function handleAsyncActionsById<P extends AnyState>(\n  type: string,\n  key: string,\n  keepData = false\n) {\n  const [SUCCESS, ERROR] = [`${type}_SUCCESS`, `${type}_ERROR`];\n  return (state: P, action: AnyAction): P => {\n    const id = action.meta;\n    switch (action.type) {\n      case type:\n        return {\n          ...state,\n          [key]: {\n            ...state[key],\n            loading: true,\n            error: null,\n            data: {\n              ...state[key].data,\n              [id]: keepData ? state[key][id] && state[key][id].data : null,\n            },\n          },\n        };\n      case SUCCESS:\n        return {\n          ...state,\n          [key]: {\n            ...state[key],\n            loading: false,\n            error: null,\n            data: {\n              ...state[key].data,\n              [id]: action.payload,\n            },\n          },\n        };\n      case ERROR:\n        return {\n          ...state,\n          [key]: {\n            ...state[key],\n            loading: false,\n            error: action.payload,\n          },\n        };\n      default:\n        return state;\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}