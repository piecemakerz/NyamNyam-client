{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = _regeneratorRuntime.mark(isTokenExpired),\n    _marked2 = _regeneratorRuntime.mark(checkToken);\n\nimport * as SecureStore from 'expo-secure-store';\nimport { decode } from 'js-base64';\nimport { fork, take, put, call, select } from 'redux-saga/effects';\nimport { invalidToken, validToken } from \"../modules/signin\";\nimport * as authAPI from \"../api/auth\";\nexport function storeTokens(accessToken, refreshToken) {\n  var token;\n  return _regeneratorRuntime.async(function storeTokens$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(SecureStore.setItemAsync('access_token', accessToken));\n\n        case 3:\n          if (!refreshToken) {\n            _context.next = 6;\n            break;\n          }\n\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(SecureStore.setItemAsync('refresh_token', refreshToken));\n\n        case 6:\n          _context.next = 8;\n          return _regeneratorRuntime.awrap(SecureStore.getItemAsync('access_token'));\n\n        case 8:\n          token = _context.sent;\n          _context.next = 14;\n          break;\n\n        case 11:\n          _context.prev = 11;\n          _context.t0 = _context[\"catch\"](0);\n          console.error('cannot store tokens:', _context.t0);\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 11]], Promise);\n}\nexport function clearTokens() {\n  var t;\n  return _regeneratorRuntime.async(function clearTokens$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(SecureStore.deleteItemAsync('access_token'));\n\n        case 3:\n          _context2.next = 5;\n          return _regeneratorRuntime.awrap(SecureStore.deleteItemAsync('refresh_token'));\n\n        case 5:\n          _context2.next = 7;\n          return _regeneratorRuntime.awrap(SecureStore.getItemAsync('access_token'));\n\n        case 7:\n          t = _context2.sent;\n          console.log('clear token:', t);\n          _context2.next = 14;\n          break;\n\n        case 11:\n          _context2.prev = 11;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.error(_context2.t0);\n\n        case 14:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[0, 11]], Promise);\n}\n;\nexport function isTokenExpired(token) {\n  var payload, exp;\n  return _regeneratorRuntime.wrap(function isTokenExpired$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          payload = JSON.parse(decode(token.split('.')[1]));\n          console.log('token payload: ', payload);\n          exp = payload.exp;\n\n          if (!(exp < Date.now() / 1000)) {\n            _context3.next = 6;\n            break;\n          }\n\n          return _context3.abrupt(\"return\", true);\n\n        case 6:\n          return _context3.abrupt(\"return\", false);\n\n        case 9:\n          _context3.prev = 9;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 13;\n          return put(invalidToken(403));\n\n        case 13:\n          throw Error('유효한 토큰이 아닙니다.');\n\n        case 15:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked, null, [[0, 9]]);\n}\n;\nexport function checkToken() {\n  var isAppLoaded,\n      _yield$select,\n      error,\n      service,\n      accessToken,\n      isTokenExpired_,\n      refreshToken,\n      res,\n      _res$data,\n      access_token,\n      userdata,\n      _res,\n      _res2,\n      _userdata,\n      _args4 = arguments;\n\n  return _regeneratorRuntime.wrap(function checkToken$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          isAppLoaded = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : false;\n          _context4.next = 3;\n          return select(function (state) {\n            return state.signin;\n          });\n\n        case 3:\n          _yield$select = _context4.sent;\n          error = _yield$select.error;\n          service = _yield$select.service;\n\n          if (!(error && service)) {\n            _context4.next = 9;\n            break;\n          }\n\n          console.log('리소스 요청 중에 인증 실패');\n          return _context4.abrupt(\"return\", false);\n\n        case 9:\n          if (!isAppLoaded) {\n            _context4.next = 15;\n            break;\n          }\n\n          _context4.next = 12;\n          return call([SecureStore, 'getItemAsync'], 'access_token');\n\n        case 12:\n          accessToken = _context4.sent;\n          _context4.next = 18;\n          break;\n\n        case 15:\n          _context4.next = 17;\n          return select(function (state) {\n            return state.signin.accessToken;\n          });\n\n        case 17:\n          accessToken = _context4.sent;\n\n        case 18:\n          console.log('access token: ', accessToken);\n\n          if (!(accessToken && typeof accessToken === 'string')) {\n            _context4.next = 91;\n            break;\n          }\n\n          _context4.prev = 20;\n          _context4.next = 23;\n          return call(isTokenExpired, accessToken);\n\n        case 23:\n          isTokenExpired_ = _context4.sent;\n          _context4.next = 33;\n          break;\n\n        case 26:\n          _context4.prev = 26;\n          _context4.t0 = _context4[\"catch\"](20);\n          console.error('access token이 유효하지 않음');\n          _context4.next = 31;\n          return put(invalidToken(403));\n\n        case 31:\n          clearTokens();\n          return _context4.abrupt(\"return\", false);\n\n        case 33:\n          if (!isTokenExpired_) {\n            _context4.next = 72;\n            break;\n          }\n\n          _context4.next = 36;\n          return call([SecureStore, 'getItemAsync'], 'refreshToken');\n\n        case 36:\n          refreshToken = _context4.sent;\n\n          if (!(refreshToken && typeof refreshToken === 'string')) {\n            _context4.next = 67;\n            break;\n          }\n\n          if (!isTokenExpired(refreshToken)) {\n            _context4.next = 45;\n            break;\n          }\n\n          _context4.next = 41;\n          return put(invalidToken(401));\n\n        case 41:\n          clearTokens();\n          return _context4.abrupt(\"return\", false);\n\n        case 45:\n          _context4.prev = 45;\n          _context4.next = 48;\n          return call(authAPI.refresh, accessToken, refreshToken, true);\n\n        case 48:\n          res = _context4.sent;\n          console.log('refresh result:', res);\n          _res$data = res.data, access_token = _res$data.access_token, userdata = _res$data.userdata;\n          storeTokens(access_token);\n\n          if (!isAppLoaded) {\n            _context4.next = 55;\n            break;\n          }\n\n          _context4.next = 55;\n          return put(validToken(accessToken, userdata));\n\n        case 55:\n          return _context4.abrupt(\"return\", true);\n\n        case 58:\n          _context4.prev = 58;\n          _context4.t1 = _context4[\"catch\"](45);\n          res = _context4.t1.response;\n          console.log('refresh result:', res);\n          _context4.next = 64;\n          return put(invalidToken(res.status));\n\n        case 64:\n          return _context4.abrupt(\"return\", false);\n\n        case 65:\n          _context4.next = 70;\n          break;\n\n        case 67:\n          _context4.next = 69;\n          return put(invalidToken(400));\n\n        case 69:\n          return _context4.abrupt(\"return\", false);\n\n        case 70:\n          _context4.next = 89;\n          break;\n\n        case 72:\n          _context4.prev = 72;\n          _context4.next = 75;\n          return call(authAPI.checkToken, accessToken);\n\n        case 75:\n          _res = _context4.sent;\n          _res2 = _res, _userdata = _res2.userdata;\n\n          if (!isAppLoaded) {\n            _context4.next = 80;\n            break;\n          }\n\n          _context4.next = 80;\n          return put(validToken(accessToken, _userdata));\n\n        case 80:\n          return _context4.abrupt(\"return\", true);\n\n        case 83:\n          _context4.prev = 83;\n          _context4.t2 = _context4[\"catch\"](72);\n          _res = _context4.t2.response;\n          _context4.next = 88;\n          return put(invalidToken(_res.status));\n\n        case 88:\n          return _context4.abrupt(\"return\", true);\n\n        case 89:\n          _context4.next = 94;\n          break;\n\n        case 91:\n          _context4.next = 93;\n          return put(invalidToken(400));\n\n        case 93:\n          return _context4.abrupt(\"return\", false);\n\n        case 94:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked2, null, [[20, 26], [45, 58], [72, 83]]);\n}\n;\nexport function createAuthCheckSaga() {\n  var isAppLoaded = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n  if (isAppLoaded) {\n    return _regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              console.log('check token in loading');\n              _context5.next = 3;\n              return call(checkToken, isAppLoaded);\n\n            case 3:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee);\n    });\n  } else {\n    return _regeneratorRuntime.mark(function _callee2(actions, sagas) {\n      var _action, isTokenValid, i;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              if (!true) {\n                _context6.next = 18;\n                break;\n              }\n\n              _context6.next = 3;\n              return take(actions);\n\n            case 3:\n              _action = _context6.sent;\n              console.log('saga action: ', _action);\n              _context6.next = 7;\n              return call(checkToken);\n\n            case 7:\n              isTokenValid = _context6.sent;\n\n              if (!isTokenValid) {\n                _context6.next = 16;\n                break;\n              }\n\n              i = 0;\n\n            case 10:\n              if (!(i < sagas.length)) {\n                _context6.next = 16;\n                break;\n              }\n\n              _context6.next = 13;\n              return fork(sagas[i], _action);\n\n            case 13:\n              i++;\n              _context6.next = 10;\n              break;\n\n            case 16:\n              _context6.next = 0;\n              break;\n\n            case 18:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee2);\n    });\n  }\n}","map":{"version":3,"sources":["/home/limwondong/codestates/nyamnyam/nyamnyam-client/src/lib/auth.ts"],"names":["isTokenExpired","checkToken","SecureStore","decode","fork","take","put","call","select","invalidToken","validToken","authAPI","storeTokens","accessToken","refreshToken","setItemAsync","getItemAsync","token","console","error","clearTokens","deleteItemAsync","t","log","payload","JSON","parse","split","exp","Date","now","Error","isAppLoaded","state","signin","service","isTokenExpired_","refresh","res","data","access_token","userdata","response","status","createAuthCheckSaga","actions","sagas","action","isTokenValid","i","length"],"mappings":"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","sourcesContent":["import * as SecureStore from 'expo-secure-store';\nimport { TextPropTypes } from 'react-native';\nimport { decode } from 'js-base64';\nimport { fork, take, put, call, select } from 'redux-saga/effects';\n\nimport { invalidToken, validToken } from '@base/modules/signin';\nimport * as authAPI from '@base/api/auth';\n\n//access token, refresh token 저장\nexport async function storeTokens(accessToken: string, refreshToken?: string){\n    try{\n        await SecureStore.setItemAsync('access_token', accessToken);\n\n        if(refreshToken){\n            await SecureStore.setItemAsync('refresh_token', refreshToken);\n        }\n\n        let token = await SecureStore.getItemAsync('access_token');\n    } catch(e){\n        console.error('cannot store tokens:', e);\n    }\n}\n\nexport async function clearTokens(){\n    try{\n        await SecureStore.deleteItemAsync('access_token');\n        await SecureStore.deleteItemAsync('refresh_token');\n        let t = await SecureStore.getItemAsync('access_token');\n        console.log('clear token:', t);\n    } catch(e){\n        console.error( e);\n    }\n};\n\n//token 만료기간 체크\nexport function* isTokenExpired(token: string){\n    //access token의 payload를 분리한 후 base64 디코딩\n    try{\n        const payload = JSON.parse(decode(token.split('.')[1]));\n        console.log('token payload: ', payload);\n        const { exp } = payload;  //토큰 만료시간\n    \n        if(exp < (Date.now() / 1000)) return true; //만료 시간이 지났다면\n  \n        return false;\n    } catch(e){\n        yield put(invalidToken(403));\n        throw Error('유효한 토큰이 아닙니다.');;\n    }\n};\n\nexport function* checkToken(isAppLoaded: boolean = false){\n    //리소스 요청 중에 인증 실패해서 인증 페이지로 이동했을 때는 토큰 체크 안함\n    const { error, service } = yield select(state => state.signin);\n    if(error && service){  //서비스 중에 에러가 난 것이기 때문에 리소스 요청 중에 인증이 실패한 것\n        console.log('리소스 요청 중에 인증 실패');\n        return false;\n    }    \n\n    //secure storage에서 access token 얻기\n    let accessToken;\n    if(isAppLoaded){\n        accessToken = yield call([SecureStore, 'getItemAsync'], 'access_token');\n    } else {\n        accessToken = yield select(state => state.signin.accessToken);\n    }\n    console.log('access token: ', accessToken);\n    //access token이 존재한다면 만료기간 확인\n    if(accessToken && typeof accessToken === 'string'){\n        let isTokenExpired_;\n        try{\n            isTokenExpired_ = yield call(isTokenExpired, accessToken)\n        } catch(e) {\n            console.error('access token이 유효하지 않음');\n            yield put(invalidToken(403));\n            clearTokens();\n\n            return false;\n        }\n\n        if(isTokenExpired_){\n            const refreshToken = yield call([SecureStore, 'getItemAsync'], 'refreshToken');\n        \n            if(refreshToken && typeof refreshToken === 'string'){\n                //refresh token의 만료기간을 확인한다\n                if(isTokenExpired(refreshToken)){\n                    //isSignin = false -> navigation rerendering  \n                    yield put(invalidToken(401));\n                    clearTokens();\n\n                    return false;\n                } else { //refresh token의 만료 기간이 유효하다면 access token을 새로 발급받는다 \n                    let res;\n                    try{\n                        res = yield call(authAPI.refresh, accessToken, refreshToken, true);\n                        console.log('refresh result:', res);\n\n                        //access token 재발급이 성공했다면\n                        const { access_token, userdata } = res.data; //유저 정보도 받아와야 함\n\n                        storeTokens(access_token);\n\n                        if(isAppLoaded){\n                            //토큰과 유저정보 저장\n                            yield put(validToken(accessToken, userdata));\n                        }                        \n\n                        return true;\n                    } catch(e){  //refresh token이 유효하지 않다면 isSignin = false\n                        res = e.response;\n                        console.log('refresh result:', res);\n                        \n                        yield put(invalidToken(res.status));\n\n                        return false;\n                    } \n                }\n\n            } else { //refresh token이 없으면 isSignin = false\n                yield put(invalidToken(400));\n                return false;\n            }\n\n        } else {  //access token의 만료 기간이 유효하다면\n            //토큰을 체크하는 api 요청해서 응답으로 유저정보를 받아와야 함\n            let res;\n            try{\n                res = yield call(authAPI.checkToken, accessToken);\n                const { userdata } = res;\n                //token check가 성공했을 떄\n                if(isAppLoaded){\n                    yield put(validToken(accessToken, userdata))\n                }\n\n                return true;\n            } catch(e){\n                //토큰이 유효하지 않거나 해당 유저정보가 없을 때 isSignin = false\n                res = e.response;\n                yield put(invalidToken(res.status));\n            }\n\n            return true;\n        }\n    } else { //access token이 존재하지 않다면 isSignin = false\n        yield put(invalidToken(400));\n        \n        return false;\n    }\n};\n\ntype Sagas = ((action: string) => void)[]\n\nexport function createAuthCheckSaga(isAppLoaded: boolean = false){\n    if(isAppLoaded){\n        return function* (){\n            console.log('check token in loading');\n            yield call(checkToken, isAppLoaded);\n        }\n    } else {\n        return function* (actions: string[], sagas: Sagas){\n            \n            while(true){\n                const action = yield take(actions);\n                console.log('saga action: ', action);\n        \n                const isTokenValid = yield call(checkToken);\n                if(isTokenValid){\n                    for(let i = 0; i < sagas.length; i++){\n                        //사가에서 api요청 보낼 때 헤더에 access token 추가\n                        yield fork(sagas[i], action);  \n                    }\n                }\n            }\n        };\n    }\n\n}\n\n//리소스 api에서 인증 실패시 에러 처리\n"]},"metadata":{},"sourceType":"module"}