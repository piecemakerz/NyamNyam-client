{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar _marked = _regeneratorRuntime.mark(confirmEmailSaga),\n    _marked2 = _regeneratorRuntime.mark(requestSignupSaga),\n    _marked3 = _regeneratorRuntime.mark(signupSaga);\n\nimport { call, put, takeEvery, takeLatest } from 'redux-saga/effects';\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { createPromiseSaga, handleAsyncActions, reducerUtils } from \"../lib/asyncUtils\";\nimport { getStoreByKeyword } from \"../api\";\nimport * as authAPI from \"../api/auth\";\nimport * as RootNavigation from \"../navigation\";\nvar INITIALIZE_SIGNUP = 'signup/INITIALIZE_SIGNUP';\nvar INPUT_USER_FIELDS = 'signup/INPUT_USER_FIELDS';\nvar EMAIL_IS_VALID = 'signup/EMAIL_IS_VALID';\nvar EMAIL_IS_INVALID = 'signup/EMAIL_IS_INVALID';\nvar GET_ADDRESS = 'signup/GET_ADDRESS';\nvar GET_ADDRESS_SUCCESS = 'signup/GET_ADDRESS_SUCCESS';\nvar GET_ADDRESS_ERROR = 'signup/GET_ADDRESS_ERROR';\nvar ADD_PICKED_ADDRESS = 'signup/ADD_ADDRESS';\nvar REMOVE_PICKED_ADDRESS = 'signup/REMOVE_ADDRESS';\nvar UPDATE_LOCATION = 'signup/UPDATE_LOCATION';\nvar REQUEST_SIGNUP = 'signup/REQUEST_SIGNUP';\nvar SIGNUP_SUCCESS = 'signup/SIGNUP_SUCCESS';\nvar SIGNUP_ERROR = 'signup/SIGNUP_ERROR';\nexport var initializeSignup = function initializeSignup() {\n  return {\n    type: INITIALIZE_SIGNUP\n  };\n};\nexport var inputUserFields = function inputUserFields(userFields) {\n  return {\n    type: INPUT_USER_FIELDS,\n    payload: userFields\n  };\n};\nexport var emailIsValid = function emailIsValid() {\n  return {\n    type: EMAIL_IS_VALID\n  };\n};\nexport var emailIsInValid = function emailIsInValid(errMsg) {\n  return {\n    type: EMAIL_IS_INVALID,\n    payload: errMsg\n  };\n};\nexport var getAddress = function getAddress(info) {\n  return {\n    type: GET_ADDRESS,\n    payload: info\n  };\n};\nexport var getAddressSuccess = function getAddressSuccess(data) {\n  return {\n    type: GET_ADDRESS_SUCCESS,\n    payload: data\n  };\n};\nexport var getAddressError = function getAddressError(error) {\n  return {\n    type: GET_ADDRESS_ERROR,\n    payload: error\n  };\n};\nexport var addAddress = function addAddress(address) {\n  return {\n    type: ADD_PICKED_ADDRESS,\n    payload: address,\n    meta: address.id\n  };\n};\nexport var removeAddress = function removeAddress(id) {\n  return {\n    type: REMOVE_PICKED_ADDRESS,\n    payload: id,\n    meta: id\n  };\n};\nexport var updateLocation = function updateLocation(coords) {\n  return {\n    type: UPDATE_LOCATION,\n    payload: coords\n  };\n};\nexport var requestSignup = function requestSignup(signupInfo) {\n  return {\n    type: REQUEST_SIGNUP,\n    payload: signupInfo\n  };\n};\nexport var signupSuccess = function signupSuccess() {\n  return {\n    type: SIGNUP_SUCCESS\n  };\n};\nexport var signupError = function signupError(errMsg) {\n  return {\n    type: SIGNUP_ERROR,\n    payload: errMsg\n  };\n};\n\nfunction confirmEmailSaga(action) {\n  var email, res;\n  return _regeneratorRuntime.wrap(function confirmEmailSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          email = action.payload.email;\n          _context.prev = 1;\n          _context.next = 4;\n          return call(authAPI.confirmEmail, email);\n\n        case 4:\n          res = _context.sent;\n          console.log('confirm email:', res);\n          _context.next = 8;\n          return put(emailIsValid());\n\n        case 8:\n          RootNavigation.navigate('SignUpAddress', {});\n          _context.next = 32;\n          break;\n\n        case 11:\n          _context.prev = 11;\n          _context.t0 = _context[\"catch\"](1);\n          res = _context.t0.response;\n          console.log('res: ', res);\n\n          if (res) {\n            _context.next = 20;\n            break;\n          }\n\n          _context.next = 18;\n          return put(signupError('알려지지 않은 에러가 발생했습니다.'));\n\n        case 18:\n          _context.next = 32;\n          break;\n\n        case 20:\n          if (!(res.status == 400)) {\n            _context.next = 25;\n            break;\n          }\n\n          _context.next = 23;\n          return put(emailIsInValid('잘못된 이메일입니다.'));\n\n        case 23:\n          _context.next = 32;\n          break;\n\n        case 25:\n          if (!(res.status === 409)) {\n            _context.next = 30;\n            break;\n          }\n\n          _context.next = 28;\n          return put(emailIsInValid('이미 존재하는 이메일입니다.'));\n\n        case 28:\n          _context.next = 32;\n          break;\n\n        case 30:\n          _context.next = 32;\n          return put(emailIsInValid(_context.t0.message));\n\n        case 32:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[1, 11]]);\n}\n\nvar getAddressSaga = createPromiseSaga(GET_ADDRESS, getStoreByKeyword);\n\nfunction requestSignupSaga(action) {\n  var signupInfo, res;\n  return _regeneratorRuntime.wrap(function requestSignupSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          signupInfo = action.payload;\n          _context2.prev = 1;\n          _context2.next = 4;\n          return call(authAPI.requestSignup, signupInfo);\n\n        case 4:\n          res = _context2.sent;\n          console.log('signup saga:', signupInfo);\n          console.log('res in try: ', res);\n          Alert.alert('회원가입에 성공하셨습니다.');\n          RootNavigation.navigate('Signin', {});\n          _context2.next = 32;\n          break;\n\n        case 11:\n          _context2.prev = 11;\n          _context2.t0 = _context2[\"catch\"](1);\n          res = _context2.t0.response;\n          console.log('res in catch: ', res);\n\n          if (res) {\n            _context2.next = 20;\n            break;\n          }\n\n          _context2.next = 18;\n          return put(signupError('알려지지 않은 에러가 발생했습니다.'));\n\n        case 18:\n          _context2.next = 32;\n          break;\n\n        case 20:\n          if (!(res.status === 400)) {\n            _context2.next = 25;\n            break;\n          }\n\n          _context2.next = 23;\n          return put(signupError('잘못된 요청입니다.'));\n\n        case 23:\n          _context2.next = 32;\n          break;\n\n        case 25:\n          if (!(res.status === 409)) {\n            _context2.next = 30;\n            break;\n          }\n\n          _context2.next = 28;\n          return put(signupError('이미 존재하는 이메일입니다.'));\n\n        case 28:\n          _context2.next = 32;\n          break;\n\n        case 30:\n          _context2.next = 32;\n          return put(signupError(_context2.t0.message));\n\n        case 32:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[1, 11]]);\n}\n\nexport function signupSaga() {\n  return _regeneratorRuntime.wrap(function signupSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest(INPUT_USER_FIELDS, confirmEmailSaga);\n\n        case 2:\n          _context3.next = 4;\n          return takeEvery(GET_ADDRESS, getAddressSaga);\n\n        case 4:\n          _context3.next = 6;\n          return takeLatest(REQUEST_SIGNUP, requestSignupSaga);\n\n        case 6:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\nvar actions = {\n  initializeSignup: initializeSignup,\n  inputUserFields: inputUserFields,\n  emailIsValid: emailIsValid,\n  emailIsInValid: emailIsInValid,\n  getAddress: getAddress,\n  getAddressSuccess: getAddressSuccess,\n  getAddressError: getAddressError,\n  addAddress: addAddress,\n  removeAddress: removeAddress,\n  updateLocation: updateLocation,\n  requestSignup: requestSignup,\n  signupSuccess: signupSuccess,\n  signupError: signupError\n};\nvar initialState = {\n  userFields: {\n    email: '',\n    password: '',\n    username: ''\n  },\n  isEmailValid: false,\n  loading: false,\n  errMsg: null,\n  address: reducerUtils.initial([]),\n  picked_address: reducerUtils.initial({}),\n  coords: null,\n  signupInfo: null\n};\nexport default function signup() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case INITIALIZE_SIGNUP:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isEmailValid: false,\n        loading: false,\n        errMsg: null\n      });\n\n    case INPUT_USER_FIELDS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        userFields: action.payload\n      });\n\n    case EMAIL_IS_VALID:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isEmailValid: true\n      });\n\n    case EMAIL_IS_INVALID:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isEmailValid: false,\n        errMsg: action.payload\n      });\n\n    case GET_ADDRESS:\n    case GET_ADDRESS_SUCCESS:\n    case GET_ADDRESS_ERROR:\n      return handleAsyncActions(GET_ADDRESS, 'address', [], true)(state, action);\n\n    case ADD_PICKED_ADDRESS:\n      if (action.meta in state.picked_address) {\n        return state;\n      } else {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          picked_address: _objectSpread(_objectSpread({}, state.picked_address), {}, {\n            data: _objectSpread(_objectSpread({}, state.picked_address.data), {}, _defineProperty({}, action.meta, action.payload))\n          })\n        });\n      }\n\n    case REMOVE_PICKED_ADDRESS:\n      var newData = _extends({}, state.picked_address.data);\n\n      delete newData[action.meta];\n      return _objectSpread(_objectSpread({}, state), {}, {\n        picked_address: _objectSpread(_objectSpread({}, state.picked_address), {}, {\n          data: newData\n        })\n      });\n\n    case UPDATE_LOCATION:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        coords: action.payload\n      });\n\n    case REQUEST_SIGNUP:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: true,\n        signupInfo: action.payload\n      });\n\n    case SIGNUP_SUCCESS:\n      return _objectSpread({}, initialState);\n\n    case SIGNUP_ERROR:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: false,\n        errMsg: action.payload\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/limwondong/codestates/nyamnyam/nyamnyam-client/src/modules/signup.ts"],"names":["confirmEmailSaga","requestSignupSaga","signupSaga","call","put","takeEvery","takeLatest","createPromiseSaga","handleAsyncActions","reducerUtils","getStoreByKeyword","authAPI","RootNavigation","INITIALIZE_SIGNUP","INPUT_USER_FIELDS","EMAIL_IS_VALID","EMAIL_IS_INVALID","GET_ADDRESS","GET_ADDRESS_SUCCESS","GET_ADDRESS_ERROR","ADD_PICKED_ADDRESS","REMOVE_PICKED_ADDRESS","UPDATE_LOCATION","REQUEST_SIGNUP","SIGNUP_SUCCESS","SIGNUP_ERROR","initializeSignup","type","inputUserFields","userFields","payload","emailIsValid","emailIsInValid","errMsg","getAddress","info","getAddressSuccess","data","getAddressError","error","addAddress","address","meta","id","removeAddress","updateLocation","coords","requestSignup","signupInfo","signupSuccess","signupError","action","email","confirmEmail","res","console","log","navigate","response","status","message","getAddressSaga","Alert","alert","actions","initialState","password","username","isEmailValid","loading","initial","picked_address","signup","state","newData"],"mappings":"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","sourcesContent":["/* eslint-disable no-case-declarations */\nimport { call, put, takeEvery, takeLatest } from 'redux-saga/effects';\nimport { Alert } from 'react-native';\nimport { ActionType } from 'typesafe-actions';\nimport { AxiosError } from 'axios';\n\nimport {\n  createPromiseSaga,\n  handleAsyncActions,\n  reducerUtils,\n} from '@base/lib/asyncUtils';\nimport { getStoreByKeyword } from '@base/api';\nimport { AddressAPIProps, AddressObject } from '@base/types/api';\nimport { UserFields, SignupState, SignupInfo } from '@base/types/auth';\nimport { PickedAddressObject, Coords } from '@base/types/SignUpAddress';\nimport * as authAPI from '@base/api/auth';\nimport * as RootNavigation from '@base/navigation';\n\n//액션 타입\nconst INITIALIZE_SIGNUP = 'signup/INITIALIZE_SIGNUP' as const;\nconst INPUT_USER_FIELDS = 'signup/INPUT_USER_FIELDS' as const;\nconst EMAIL_IS_VALID ='signup/EMAIL_IS_VALID' as const;\nconst EMAIL_IS_INVALID ='signup/EMAIL_IS_INVALID' as const;\nconst GET_ADDRESS = 'signup/GET_ADDRESS' as const;\nconst GET_ADDRESS_SUCCESS = 'signup/GET_ADDRESS_SUCCESS' as const;\nconst GET_ADDRESS_ERROR = 'signup/GET_ADDRESS_ERROR' as const;\nconst ADD_PICKED_ADDRESS = 'signup/ADD_ADDRESS' as const;\nconst REMOVE_PICKED_ADDRESS = 'signup/REMOVE_ADDRESS' as const;\nconst UPDATE_LOCATION = 'signup/UPDATE_LOCATION' as const;\nconst REQUEST_SIGNUP = 'signup/REQUEST_SIGNUP' as const;\nconst SIGNUP_SUCCESS = 'signup/SIGNUP_SUCCESS' as const;\nconst SIGNUP_ERROR = 'signup/SIGNUP_ERROR' as const;\n\n//액션 생성자\nexport const initializeSignup = () => ({\n  type: INITIALIZE_SIGNUP\n});\n\nexport const inputUserFields = (userFields: UserFields) => ({\n  type: INPUT_USER_FIELDS,\n  payload: userFields\n});\n\nexport const emailIsValid = () => ({\n  type: EMAIL_IS_VALID\n});\n\nexport const emailIsInValid = (errMsg: string) => ({\n  type: EMAIL_IS_INVALID,\n  payload:errMsg\n});\n\nexport const getAddress = (info: AddressAPIProps) => ({\n  type: GET_ADDRESS,\n  payload: info,\n});\n\nexport const getAddressSuccess = (data: AddressObject[]) => ({\n  type: GET_ADDRESS_SUCCESS,\n  payload: data,\n});\n\nexport const getAddressError = (error: AxiosError) => ({\n  type: GET_ADDRESS_ERROR,\n  payload: error,\n});\n\nexport const addAddress = (address: PickedAddressObject) => ({\n  type: ADD_PICKED_ADDRESS,\n  payload: address,\n  meta: address.id,\n});\n\nexport const removeAddress = (id: string) => ({\n  type: REMOVE_PICKED_ADDRESS,\n  payload: id,\n  meta: id,\n});\n\nexport const updateLocation = (coords: Coords) => ({\n  type: UPDATE_LOCATION,\n  payload: coords,\n});\n\nexport const requestSignup = (signupInfo: SignupInfo)  => ({\n  type: REQUEST_SIGNUP,\n  payload: signupInfo\n});\n\nexport const signupSuccess = () => ({\n  type:SIGNUP_SUCCESS\n});\n\nexport const signupError = (errMsg: string) => ({\n  type:SIGNUP_ERROR,\n  payload: errMsg\n});\n\n//리덕스 사가\nfunction* confirmEmailSaga(action: ReturnType<typeof inputUserFields>){\n  const email = action.payload.email;\n  let res;\n\n  try{\n    res = yield call(authAPI.confirmEmail, email);\n    console.log('confirm email:', res);\n\n    yield put(emailIsValid());\n  \n    RootNavigation.navigate('SignUpAddress', {});\n  } catch(e){\n    res = e.response;\n    console.log('res: ', res);\n\n    if(!res){\n      yield put(signupError('알려지지 않은 에러가 발생했습니다.'));\n    } else if(res.status == 400){\n      yield put(emailIsInValid('잘못된 이메일입니다.'));\n    } else if(res.status === 409){\n      yield put(emailIsInValid('이미 존재하는 이메일입니다.'));\n    } else {\n      yield put(emailIsInValid(e.message));\n    }\n  }\n}\n\nconst getAddressSaga = createPromiseSaga(GET_ADDRESS, getStoreByKeyword);\n\nfunction* requestSignupSaga(action: ReturnType<typeof requestSignup>){\n  const signupInfo = action.payload;\n  let res; \n  try{\n    res = yield call(authAPI.requestSignup, signupInfo);\n    console.log('signup saga:', signupInfo);\n    console.log('res in try: ', res);\n    Alert.alert('회원가입에 성공하셨습니다.');\n    RootNavigation.navigate('Signin', {});\n  } catch(e){\n    res = e.response;\n    console.log('res in catch: ', res);\n    \n    if(!res){\n      yield put(signupError('알려지지 않은 에러가 발생했습니다.'))\n    } else if(res.status === 400){\n      yield put(signupError('잘못된 요청입니다.'));\n    } else if(res.status === 409){\n      yield put(signupError('이미 존재하는 이메일입니다.'));\n    } else {\n      yield put(signupError(e.message));\n    }\n  }\n}\n\nexport function* signupSaga() {\n  yield takeLatest(INPUT_USER_FIELDS, confirmEmailSaga);\n  yield takeEvery(GET_ADDRESS, getAddressSaga);\n  yield takeLatest(REQUEST_SIGNUP, requestSignupSaga);\n}\n\n\nconst actions = {\n  initializeSignup,\n  inputUserFields,\n  emailIsValid,\n  emailIsInValid,\n  getAddress,\n  getAddressSuccess,\n  getAddressError,\n  addAddress,\n  removeAddress,\n  updateLocation,\n  requestSignup,\n  signupSuccess,\n  signupError,\n};\n\ntype SignupAction = ActionType<typeof actions>;\n\nconst initialState = {\n  userFields: {\n    email: '',\n    password: '',\n    username: ''\n  },\n  isEmailValid: false,\n  loading:false,\n  errMsg: null,\n  address: reducerUtils.initial([]),\n  picked_address: reducerUtils.initial({}),\n  coords: null,\n  signupInfo: null\n};\n\n\n//리듀서\nexport default function signup(\n  state: SignupState = initialState,\n  action: SignupAction\n): SignupState {\n  switch (action.type) {\n    case INITIALIZE_SIGNUP:\n      return {\n        ...state,\n        isEmailValid: false,\n        loading: false,\n        errMsg: null\n      };\n    case INPUT_USER_FIELDS:\n      return {\n        ...state,\n        userFields: action.payload \n      };\n    case EMAIL_IS_VALID:\n      return {\n        ...state,\n        isEmailValid: true\n      };\n    case EMAIL_IS_INVALID:\n      return {\n        ...state,\n        isEmailValid: false,\n        errMsg: action.payload\n      };\n    case GET_ADDRESS:\n    case GET_ADDRESS_SUCCESS:\n    case GET_ADDRESS_ERROR:\n      return handleAsyncActions<SignupState>(\n        GET_ADDRESS,\n        'address',\n        [],\n        true\n      )(state, action);\n    case ADD_PICKED_ADDRESS:\n      if (action.meta in state.picked_address) {\n        return state;\n      } else {\n        return {\n          ...state,\n          picked_address: {\n            ...state.picked_address,\n            data: {\n              ...state.picked_address.data,\n              [action.meta]: action.payload,\n            },\n          },\n        };\n      }\n    case REMOVE_PICKED_ADDRESS:\n      const newData = Object.assign({}, state.picked_address.data);\n      delete newData[action.meta];\n      return {\n        ...state,\n        picked_address: {\n          ...state.picked_address,\n          data: newData,\n        },\n      };\n    case UPDATE_LOCATION:\n      return {\n        ...state,\n        coords: action.payload,\n      };\n    case REQUEST_SIGNUP:\n      return {\n        ...state,\n        loading: true,\n        signupInfo: action.payload\n      };\n    case SIGNUP_SUCCESS:\n      return {\n        ...initialState\n      };\n    case SIGNUP_ERROR:\n      return {\n        ...state,\n        loading: false,\n        errMsg: action.payload\n      };\n    default:\n      return state;\n  }\n}"]},"metadata":{},"sourceType":"module"}