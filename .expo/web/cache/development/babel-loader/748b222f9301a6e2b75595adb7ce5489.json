{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar _marked = _regeneratorRuntime.mark(requestSigninSaga),\n    _marked2 = _regeneratorRuntime.mark(signinSaga);\n\nimport { call, put, takeEvery, takeLatest } from 'redux-saga/effects';\nimport * as authAPI from \"../api/auth\";\nimport { storeTokens, createAuthCheckSaga } from \"../lib/auth\";\nvar INITIALIZE_SIGNIN = 'signnin/INITIALIZE_SIGNIN';\nvar REQUEST_SIGNIN = 'signin/REQUEST_SIGNIN';\nvar SIGNIN_SUCCESS = 'signin/SIGNIN_SUCCESS';\nvar SIGNIN_ERROR = 'signin/SIGNIN_ERROR';\nvar REFRESH = 'signin/REFRESH';\nvar CHECK_TOKEN = 'signin/CHECK_TOKEN';\nvar INVALID_TOKEN = 'signin/INVALID_TOKEN';\nvar VALID_TOKEN = 'signin/VALID_TOKEN';\nexport var initializeSignin = function initializeSignin(service) {\n  return {\n    type: INITIALIZE_SIGNIN,\n    payload: service\n  };\n};\nexport var requestSignin = function requestSignin(signinInfo) {\n  return {\n    type: REQUEST_SIGNIN,\n    payload: signinInfo\n  };\n};\nexport var signinSuccess = function signinSuccess(userdata, accessToken) {\n  return {\n    type: SIGNIN_SUCCESS,\n    payload: {\n      userdata: userdata,\n      accessToken: accessToken\n    }\n  };\n};\nexport var signinError = function signinError(msg) {\n  return {\n    type: SIGNIN_ERROR,\n    payload: msg\n  };\n};\nexport var refresh = function refresh(accessToken, refreshToken) {\n  return {\n    type: REFRESH,\n    payload: {\n      accessToken: accessToken,\n      refreshToken: refreshToken\n    }\n  };\n};\nexport var checkToken = function checkToken() {\n  return {\n    type: CHECK_TOKEN\n  };\n};\nexport var invalidToken = function invalidToken(statusCode) {\n  return {\n    type: INVALID_TOKEN,\n    payload: statusCode\n  };\n};\nexport var validToken = function validToken(accessToken, userdata) {\n  return {\n    type: VALID_TOKEN,\n    payload: {\n      accessToken: accessToken,\n      userdata: userdata\n    }\n  };\n};\nvar actions = {\n  initializeSignin: initializeSignin,\n  signinSuccess: signinSuccess,\n  signinError: signinError,\n  requestSignin: requestSignin,\n  refresh: refresh,\n  validToken: validToken,\n  invalidToken: invalidToken\n};\n\nfunction requestSigninSaga(action) {\n  var signinInfo, res, userdata, access_token, refresh_token;\n  return _regeneratorRuntime.wrap(function requestSigninSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          signinInfo = action.payload;\n          console.log('before signin');\n          _context.prev = 2;\n          _context.next = 5;\n          return call(authAPI.signin, signinInfo);\n\n        case 5:\n          res = _context.sent;\n          console.log('res success: ', res.data.userdata);\n          userdata = res.data.userdata;\n          access_token = userdata.access_token, refresh_token = userdata.refresh_token;\n          delete userdata['access_token'];\n          delete userdata['refresh_token'];\n          _context.next = 13;\n          return put(signinSuccess(userdata, access_token));\n\n        case 13:\n          access_token = JSON.stringify(access_token);\n          refresh_token = JSON.stringify(refresh_token);\n          storeTokens(access_token, refresh_token);\n          _context.next = 38;\n          break;\n\n        case 18:\n          _context.prev = 18;\n          _context.t0 = _context[\"catch\"](2);\n          res = _context.t0.response;\n          console.log('error:', res, _context.t0);\n\n          if (res) {\n            _context.next = 26;\n            break;\n          }\n\n          _context.next = 25;\n          return put(signinError('알려지지 않은 에러가 발생했습니다.'));\n\n        case 25:\n          return _context.abrupt(\"return\");\n\n        case 26:\n          if (!(res.status == 400)) {\n            _context.next = 31;\n            break;\n          }\n\n          _context.next = 29;\n          return put(signinError('아이디 또는 비밀번호를 입력해주세요.'));\n\n        case 29:\n          _context.next = 38;\n          break;\n\n        case 31:\n          if (!(res.status == 404)) {\n            _context.next = 36;\n            break;\n          }\n\n          _context.next = 34;\n          return put(signinError('계정이 존재하지 않습니다.'));\n\n        case 34:\n          _context.next = 38;\n          break;\n\n        case 36:\n          _context.next = 38;\n          return put(signinError(_context.t0.message));\n\n        case 38:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[2, 18]]);\n}\n\nvar startAuthCheckSaga = createAuthCheckSaga(true);\nexport function signinSaga() {\n  return _regeneratorRuntime.wrap(function signinSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(CHECK_TOKEN, startAuthCheckSaga);\n\n        case 2:\n          _context2.next = 4;\n          return takeLatest(REQUEST_SIGNIN, requestSigninSaga);\n\n        case 4:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\nvar initialState = {\n  isSignin: false,\n  service: null,\n  user: null,\n  loading: false,\n  error: null,\n  accessToken: null\n};\n\nvar getAuthErrMsg = function getAuthErrMsg(statusCode) {\n  if (statusCode == 400) {\n    return '토큰이 존재하지 않습니다.';\n  } else if (statusCode == 401) {\n    return '토큰 만료기간이 지났습니다';\n  } else if (statusCode == 403) {\n    return '유효한 토큰이 아닙니다.';\n  }\n\n  return null;\n};\n\nexport default function signin() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case INITIALIZE_SIGNIN:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        service: action.payload,\n        user: null,\n        loading: false,\n        error: null,\n        accessToken: null\n      });\n\n    case REQUEST_SIGNIN:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: true\n      });\n\n    case SIGNIN_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isSignin: true,\n        user: action.payload.userdata,\n        loading: false,\n        error: null,\n        accessToken: action.payload.accessToken\n      });\n\n    case SIGNIN_ERROR:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isSignin: false,\n        loading: false,\n        error: action.payload\n      });\n\n    case VALID_TOKEN:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isSignin: true,\n        accessToken: action.payload.accessToken,\n        user: action.payload.userdata\n      });\n\n    case INVALID_TOKEN:\n      return _objectSpread(_objectSpread({}, initialState), {}, {\n        service: state.service,\n        error: getAuthErrMsg(action.payload)\n      });\n\n    default:\n      return state;\n  }\n}\n;","map":{"version":3,"sources":["/home/limwondong/codestates/nyamnyam/nyamnyam-client/src/modules/signin.ts"],"names":["requestSigninSaga","signinSaga","call","put","takeEvery","takeLatest","authAPI","storeTokens","createAuthCheckSaga","INITIALIZE_SIGNIN","REQUEST_SIGNIN","SIGNIN_SUCCESS","SIGNIN_ERROR","REFRESH","CHECK_TOKEN","INVALID_TOKEN","VALID_TOKEN","initializeSignin","service","type","payload","requestSignin","signinInfo","signinSuccess","userdata","accessToken","signinError","msg","refresh","refreshToken","checkToken","invalidToken","statusCode","validToken","actions","action","console","log","signin","res","data","access_token","refresh_token","JSON","stringify","response","status","message","startAuthCheckSaga","initialState","isSignin","user","loading","error","getAuthErrMsg","state"],"mappings":";;;;;;;uCA4EUA,iB;wCAyCOC,U;;AAnHjB,SAASC,IAAT,EAAeC,GAAf,EAAoBC,SAApB,EAA+BC,UAA/B,QAAiD,oBAAjD;AACA,OAAO,KAAKC,OAAZ;AAEA,SAASC,WAAT,EAAsBC,mBAAtB;AAGA,IAAMC,iBAAiB,GAAI,2BAA3B;AACA,IAAMC,cAAc,GAAG,uBAAvB;AACA,IAAMC,cAAc,GAAG,uBAAvB;AACA,IAAMC,YAAY,GAAG,qBAArB;AACA,IAAMC,OAAO,GAAG,gBAAhB;AACA,IAAMC,WAAW,GAAG,oBAApB;AACA,IAAMC,aAAa,GAAG,sBAAtB;AACA,IAAMC,WAAW,GAAG,oBAApB;AAIA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,OAAD,EAAmC;AAC/D,SAAO;AACHC,IAAAA,IAAI,EAAEV,iBADH;AAEHW,IAAAA,OAAO,EAACF;AAFL,GAAP;AAIH,CALM;AAOP,OAAO,IAAMG,aAAa,GAAG,SAAhBA,aAAgB,CAACC,UAAD;AAAA,SAA6B;AACtDH,IAAAA,IAAI,EAAET,cADgD;AAEtDU,IAAAA,OAAO,EAAEE;AAF6C,GAA7B;AAAA,CAAtB;AAKP,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,QAAD,EAA2BC,WAA3B;AAAA,SAAoD;AAC7EN,IAAAA,IAAI,EAAER,cADuE;AAE7ES,IAAAA,OAAO,EAAE;AACLI,MAAAA,QAAQ,EAARA,QADK;AAELC,MAAAA,WAAW,EAAXA;AAFK;AAFoE,GAApD;AAAA,CAAtB;AAQP,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,GAAD;AAAA,SAAkB;AACzCR,IAAAA,IAAI,EAAEP,YADmC;AAEzCQ,IAAAA,OAAO,EAAEO;AAFgC,GAAlB;AAAA,CAApB;AAKP,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACH,WAAD,EAAsBI,YAAtB;AAAA,SAAgD;AACnEV,IAAAA,IAAI,EAAEN,OAD6D;AAEnEO,IAAAA,OAAO,EAAE;AAAEK,MAAAA,WAAW,EAAXA,WAAF;AAAeI,MAAAA,YAAY,EAAZA;AAAf;AAF0D,GAAhD;AAAA,CAAhB;AAKP,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa;AAAA,SAAO;AAC7BX,IAAAA,IAAI,EAAEL;AADuB,GAAP;AAAA,CAAnB;AAIP,OAAO,IAAMiB,YAAY,GAAG,SAAfA,YAAe,CAACC,UAAD;AAAA,SAAkC;AAC1Db,IAAAA,IAAI,EAACJ,aADqD;AAE1DK,IAAAA,OAAO,EAAEY;AAFiD,GAAlC;AAAA,CAArB;AAKP,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACR,WAAD,EAAsBD,QAAtB;AAAA,SAAoD;AAC1EL,IAAAA,IAAI,EAAEH,WADoE;AAE1EI,IAAAA,OAAO,EAAE;AAAEK,MAAAA,WAAW,EAAXA,WAAF;AAAeD,MAAAA,QAAQ,EAARA;AAAf;AAFiE,GAApD;AAAA,CAAnB;AAKP,IAAMU,OAAO,GAAG;AACZjB,EAAAA,gBAAgB,EAAhBA,gBADY;AAEZM,EAAAA,aAAa,EAAbA,aAFY;AAGZG,EAAAA,WAAW,EAAXA,WAHY;AAIZL,EAAAA,aAAa,EAAbA,aAJY;AAKZO,EAAAA,OAAO,EAAPA,OALY;AAMZK,EAAAA,UAAU,EAAVA,UANY;AAOZF,EAAAA,YAAY,EAAZA;AAPY,CAAhB;;AAaA,SAAU/B,iBAAV,CAA4BmC,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AACUb,UAAAA,UADV,GACuBa,MAAM,CAACf,OAD9B;AAGIgB,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AAHJ;AAAA;AAMc,iBAAMnC,IAAI,CAACI,OAAO,CAACgC,MAAT,EAAiBhB,UAAjB,CAAV;;AANd;AAMQiB,UAAAA,GANR;AAOQH,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BE,GAAG,CAACC,IAAJ,CAAShB,QAAtC;AACMA,UAAAA,QARd,GAQyBe,GAAG,CAACC,IAAJ,CAAShB,QARlC;AASciB,UAAAA,YATd,GAS8CjB,QAT9C,CASciB,YATd,EAS4BC,aAT5B,GAS8ClB,QAT9C,CAS4BkB,aAT5B;AAYQ,iBAAOlB,QAAQ,CAAC,cAAD,CAAf;AACA,iBAAOA,QAAQ,CAAC,eAAD,CAAf;AAbR;AAeQ,iBAAMrB,GAAG,CAACoB,aAAa,CAACC,QAAD,EAAWiB,YAAX,CAAd,CAAT;;AAfR;AAkBQA,UAAAA,YAAY,GAAGE,IAAI,CAACC,SAAL,CAAeH,YAAf,CAAf;AACAC,UAAAA,aAAa,GAAGC,IAAI,CAACC,SAAL,CAAeF,aAAf,CAAhB;AACAnC,UAAAA,WAAW,CAACkC,YAAD,EAAeC,aAAf,CAAX;AApBR;AAAA;;AAAA;AAAA;AAAA;AAsBQH,UAAAA,GAAG,GAAG,YAAEM,QAAR;AACAT,UAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBE,GAAtB;;AAvBR,cAwBYA,GAxBZ;AAAA;AAAA;AAAA;;AAAA;AAyBY,iBAAMpC,GAAG,CAACuB,WAAW,CAAC,qBAAD,CAAZ,CAAT;;AAzBZ;AAAA;;AAAA;AAAA,gBA6BYa,GAAG,CAACO,MAAJ,IAAc,GA7B1B;AAAA;AAAA;AAAA;;AAAA;AA8BY,iBAAM3C,GAAG,CAACuB,WAAW,CAAC,sBAAD,CAAZ,CAAT;;AA9BZ;AAAA;AAAA;;AAAA;AAAA,gBA+BmBa,GAAG,CAACO,MAAJ,IAAc,GA/BjC;AAAA;AAAA;AAAA;;AAAA;AAgCY,iBAAM3C,GAAG,CAACuB,WAAW,CAAC,gBAAD,CAAZ,CAAT;;AAhCZ;AAAA;AAAA;;AAAA;AAAA;AAkCY,iBAAMvB,GAAG,CAACuB,WAAW,CAAC,YAAEqB,OAAH,CAAZ,CAAT;;AAlCZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAuCA,IAAMC,kBAAkB,GAAGxC,mBAAmB,CAAC,IAAD,CAA9C;AAEA,OAAO,SAAUP,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACH,iBAAMG,SAAS,CAACU,WAAD,EAAckC,kBAAd,CAAf;;AADG;AAAA;AAEH,iBAAM3C,UAAU,CAACK,cAAD,EAAiBV,iBAAjB,CAAhB;;AAFG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKP,IAAMiD,YAAyB,GAAG;AAC9BC,EAAAA,QAAQ,EAAE,KADoB;AAE9BhC,EAAAA,OAAO,EAAE,IAFqB;AAG9BiC,EAAAA,IAAI,EAAE,IAHwB;AAI9BC,EAAAA,OAAO,EAAE,KAJqB;AAK9BC,EAAAA,KAAK,EAAE,IALuB;AAM9B5B,EAAAA,WAAW,EAAE;AANiB,CAAlC;;AASA,IAAM6B,aAAa,GAAG,SAAhBA,aAAgB,CAACtB,UAAD,EAAiC;AACnD,MAAGA,UAAU,IAAI,GAAjB,EAAqB;AACjB,WAAO,gBAAP;AACH,GAFD,MAEO,IAAGA,UAAU,IAAI,GAAjB,EAAqB;AACxB,WAAQ,gBAAR;AACH,GAFM,MAEA,IAAIA,UAAU,IAAI,GAAlB,EAAsB;AACzB,WAAO,eAAP;AACH;;AAED,SAAO,IAAP;AACH,CAVD;;AAaA,eAAe,SAASM,MAAT,GAGA;AAAA,MAFXiB,KAEW,uEAFUN,YAEV;AAAA,MADXd,MACW;;AACX,UAAOA,MAAM,CAAChB,IAAd;AACI,SAAKV,iBAAL;AACI,6CACO8C,KADP;AAEIrC,QAAAA,OAAO,EAAEiB,MAAM,CAACf,OAFpB;AAGI+B,QAAAA,IAAI,EAAE,IAHV;AAIIC,QAAAA,OAAO,EAAE,KAJb;AAKIC,QAAAA,KAAK,EAAE,IALX;AAMI5B,QAAAA,WAAW,EAAE;AANjB;;AAQJ,SAAKf,cAAL;AACI,6CACO6C,KADP;AAEIH,QAAAA,OAAO,EAAE;AAFb;;AAIJ,SAAKzC,cAAL;AACI,6CACO4C,KADP;AAEIL,QAAAA,QAAQ,EAAE,IAFd;AAGIC,QAAAA,IAAI,EAAEhB,MAAM,CAACf,OAAP,CAAeI,QAHzB;AAII4B,QAAAA,OAAO,EAAE,KAJb;AAKIC,QAAAA,KAAK,EAAE,IALX;AAMI5B,QAAAA,WAAW,EAAEU,MAAM,CAACf,OAAP,CAAeK;AANhC;;AAQJ,SAAKb,YAAL;AACI,6CACO2C,KADP;AAEIL,QAAAA,QAAQ,EAAE,KAFd;AAGIE,QAAAA,OAAO,EAAE,KAHb;AAIIC,QAAAA,KAAK,EAAElB,MAAM,CAACf;AAJlB;;AAMJ,SAAKJ,WAAL;AACI,6CACOuC,KADP;AAEIL,QAAAA,QAAQ,EAAE,IAFd;AAGIzB,QAAAA,WAAW,EAAEU,MAAM,CAACf,OAAP,CAAeK,WAHhC;AAII0B,QAAAA,IAAI,EAAEhB,MAAM,CAACf,OAAP,CAAeI;AAJzB;;AAMJ,SAAKT,aAAL;AACI,6CACOkC,YADP;AAEI/B,QAAAA,OAAO,EAAEqC,KAAK,CAACrC,OAFnB;AAGImC,QAAAA,KAAK,EAAEC,aAAa,CAACnB,MAAM,CAACf,OAAR;AAHxB;;AAKJ;AACI,aAAOmC,KAAP;AA7CR;AA+CH;AAAA","sourcesContent":["import { State } from 'react-native-gesture-handler';\nimport { ActionType } from 'typesafe-actions';\nimport { call, put, takeEvery, takeLatest } from 'redux-saga/effects';\nimport * as authAPI from '@base/api/auth';\nimport { SigninInfo, SigninState, SigninUserData } from '@base/types/auth';\nimport { storeTokens, createAuthCheckSaga } from '@base/lib/auth';\n\n//액션 타입\nconst INITIALIZE_SIGNIN =  'signnin/INITIALIZE_SIGNIN' as const;\nconst REQUEST_SIGNIN = 'signin/REQUEST_SIGNIN' as const;\nconst SIGNIN_SUCCESS = 'signin/SIGNIN_SUCCESS' as const;\nconst SIGNIN_ERROR = 'signin/SIGNIN_ERROR' as const;\nconst REFRESH = 'signin/REFRESH' as const;\nconst CHECK_TOKEN = 'signin/CHECK_TOKEN' as const;\nconst INVALID_TOKEN = 'signin/INVALID_TOKEN' as const;\nconst VALID_TOKEN = 'signin/VALID_TOKEN' as const;\n\n//액션 생성자\n\nexport const initializeSignin = (service: 'customer' | 'store') => {\n    return {\n        type: INITIALIZE_SIGNIN,\n        payload:service\n    }\n};\n\nexport const requestSignin = (signinInfo: SigninInfo) => ({\n    type: REQUEST_SIGNIN,\n    payload: signinInfo\n});\n\nexport const signinSuccess = (userdata: SigninUserData, accessToken: string) => ({\n    type: SIGNIN_SUCCESS,\n    payload: {\n        userdata,\n        accessToken\n    }\n});\n\nexport const signinError = (msg: string) => ({\n    type: SIGNIN_ERROR,\n    payload: msg\n});\n\nexport const refresh = (accessToken: string, refreshToken: string) => ({\n    type: REFRESH,\n    payload: { accessToken, refreshToken }\n});\n\nexport const checkToken = () => ({\n    type: CHECK_TOKEN\n});\n\nexport const invalidToken = (statusCode: number | string) => ({\n    type:INVALID_TOKEN,\n    payload: statusCode\n});\n\nexport const validToken = (accessToken: string, userdata: SigninUserData) => ({\n    type: VALID_TOKEN,\n    payload: { accessToken, userdata }\n});\n\nconst actions = {\n    initializeSignin,\n    signinSuccess,\n    signinError,\n    requestSignin,\n    refresh,\n    validToken,\n    invalidToken\n};\n\ntype SigninAction = ActionType<typeof actions>\n\n//리덕스 사가\nfunction* requestSigninSaga(action: ReturnType<typeof requestSignin>){\n    const signinInfo = action.payload;\n    let res;\n    console.log('before signin');\n\n    try{\n        res = yield call(authAPI.signin, signinInfo);\n        console.log('res success: ', res.data.userdata);\n        const userdata = res.data.userdata\n        let { access_token, refresh_token } = userdata;\n        \n        \n        delete userdata['access_token'];\n        delete userdata['refresh_token'];\n\n        yield put(signinSuccess(userdata, access_token));\n\n        //access token, refresh token 저장\n        access_token = JSON.stringify(access_token);\n        refresh_token = JSON.stringify(refresh_token);\n        storeTokens(access_token, refresh_token);\n    } catch(e){\n        res = e.response;\n        console.log('error:', res, e);\n        if(!res){\n            yield put(signinError('알려지지 않은 에러가 발생했습니다.'))\n            return;\n        }\n\n        if (res.status == 400){\n            yield put(signinError('아이디 또는 비밀번호를 입력해주세요.'));\n        } else if (res.status == 404){\n            yield put(signinError('계정이 존재하지 않습니다.'));\n        } else {\n            yield put(signinError(e.message));\n        }\n    }\n}\n\nconst startAuthCheckSaga = createAuthCheckSaga(true);\n\nexport function* signinSaga(){\n    yield takeEvery(CHECK_TOKEN, startAuthCheckSaga);\n    yield takeLatest(REQUEST_SIGNIN, requestSigninSaga);\n}\n\nconst initialState: SigninState = {\n    isSignin: false,\n    service: null,\n    user: null,\n    loading: false,\n    error: null,\n    accessToken: null\n};\n\nconst getAuthErrMsg = (statusCode: string | number) => {\n    if(statusCode == 400){\n        return '토큰이 존재하지 않습니다.'\n    } else if(statusCode == 401){\n        return  '토큰 만료기간이 지났습니다';\n    } else if (statusCode == 403){\n        return '유효한 토큰이 아닙니다.';\n    }\n\n    return null;\n};\n\n//리듀서\nexport default function signin(\n    state: SigninState = initialState,\n    action: SigninAction\n): SigninState {\n    switch(action.type){\n        case INITIALIZE_SIGNIN:\n            return {\n                ...state,\n                service: action.payload,\n                user: null,\n                loading: false,\n                error: null,\n                accessToken: null\n            };\n        case REQUEST_SIGNIN:\n            return {\n                ...state,\n                loading: true\n            };\n        case SIGNIN_SUCCESS:\n            return {\n                ...state,\n                isSignin: true,\n                user: action.payload.userdata,\n                loading: false,\n                error: null,\n                accessToken: action.payload.accessToken\n            };\n        case SIGNIN_ERROR:\n            return {\n                ...state,\n                isSignin: false,\n                loading: false,\n                error: action.payload\n            };\n        case VALID_TOKEN:\n            return {\n                ...state,\n                isSignin: true,\n                accessToken: action.payload.accessToken,\n                user: action.payload.userdata\n            };\n        case INVALID_TOKEN:\n            return {\n                ...initialState,\n                service: state.service,\n                error: getAuthErrMsg(action.payload)\n            };\n        default:\n            return state;\n    }\n};"]},"metadata":{},"sourceType":"module"}